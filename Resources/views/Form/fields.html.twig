{#
This file is part of the CampaignChain package.

(c) Sandro Groganz <sandro@campaignchain.com>

For the full copyright and license information, please view the LICENSE
file that was distributed with this source code.
#}

{% extends 'CampaignChainCoreBundle:Base:base.html.twig' %}

{% block choice_widget_collapsed %}
    {% spaceless %}
        <script>
            $('.select2').select2({ placeholder: "Select a State", maximumSelectionSize: 6 });
            $(':checkbox').on( "click", function() {
                $(this).parent().nextAll('select').select2("enable", this.checked );
            });
        </script>
        {% set attr = attr|merge({ 'class': (attr.class|default('') ~ ' form-control')|trim }) %}

        <select class="form-control {{ id }}-select2" {{ block('widget_attributes') }}{% if multiple %} multiple="multiple"{% endif %}>
            {% if empty_value is not none %}
                <option></option>
            {% endif %}
            {% if preferred_choices|length > 0 %}
                {% set options = preferred_choices %}
                {{ block('choice_widget_options') }}
                {% if choices|length > 0 and separator is not none %}
                    <option disabled="disabled">{{ separator }}</option>
                {% endif %}
            {% endif %}
            {% set options = choices %}
            {{ block('choice_widget_options') }}
        </select>
        <script>
            {% if attr.show_image is defined and attr.show_image == true %}
                function format(optionnode) {
                    if (!optionnode.id) return optionnode.text; // optgroup
                    var originalOption = optionnode.element;
                    var image = "<div class='campaignchain-medium-icon'>";

                    image = image + "<img class='icon' src='" + $(originalOption).data('icon') + "'/>";
                    if($(originalOption).data('context-icon') != '/'){
                        image = image + "<img class='context-icon' src='" + $(originalOption).data('context-icon') + "' style='background-image: url(\"" + $(originalOption).data('context-icon') + "\");'/>"
                    }
                    return image + "<span class='text'>" + optionnode.text + "</span></div>";
                }
            {% endif %}
            $('.{{ id }}-select2').select2({
                {% if empty_value is not none %}
                    placeholder: "{{ empty_value|trans({}, translation_domain) }}", allowClear: true,
                {% endif %}
                {% if attr.show_image is defined and attr.show_image == true %}
                    formatResult: format,
                    formatSelection: format,
                    escapeMarkup: function(m) { return m; },
                {% endif %}
                {% if attr.minimum_resulsts_for_search is defined and attr.minimum_resulsts_for_search is not empty %}
                    {% set minimum_resulsts_for_search = attr.minimum_resulsts_for_search %}
                {% else %}
                    {% set minimum_resulsts_for_search = '5' %}
                {% endif %}
                minimumResultsForSearch : {{ minimum_resulsts_for_search }}
            });
            $(':checkbox').on( "click", function() {
                $(this).parent().nextAll('select').select2("enable", this.checked );
            });
        </script>
    {% endspaceless %}
{% endblock choice_widget_collapsed %}

{% block choice_widget_options %}
    {% spaceless %}
        {% for group_label, choice in options %}
            {% if choice is iterable %}
                <optgroup label="{{ group_label|trans({}, translation_domain) }}">
                    {% set options = choice %}
                    {{ block('choice_widget_options') }}
                </optgroup>
            {% else %}
                <option value="{{ choice.value }}"{% if choice is selectedchoice(value) %} selected="selected"{% endif %}
                    {% if attr.show_image is defined and attr.show_image == true %}
                        data-icon="{{ asset( choice.data|campaignchain_medium_icon ) }}"
                        data-context-icon="{{ asset( choice.data|campaignchain_medium_context ) }}"
                    {% endif %}> {{ choice.label|trans({}, translation_domain) }}
                </option>
            {% endif %}
        {% endfor %}
    {% endspaceless %}
{% endblock choice_widget_options %}

{% block daterangepicker_widget %}
    {% spaceless %}
        {% set value = data|campaignchain_datetime() %}
        {% if widget == 'single_text' %}
            {{ block('form_widget_simple') }}
        {% else %}
            {% set attr = attr|merge({ 'class': 'bootstrap-datetime' }) %}
            <div {{ block('widget_container_attributes') }}>
                {{ form_widget(form.date) }}
                {{ form_widget(form.time) }}
                {{ form_errors(form.date) }}
                {{ form_errors(form.time) }}
            </div>
        {% endif %}
        {% if attr.is_end_date is not defined or attr.is_end_date != true %}
            <script type="text/javascript">
                $(document).ready(function() {
                    // Define the start and end date elements.
                    var startElement = $('#{{ id }}');
                    var endElementId = startElement.attr('id').replace('startDate', 'endDate');
                    var endElement = $('#' + endElementId);

                    // TODO: Take hour from system setting of work day start hour.
                    var minDate = moment().hour(9).minute(0).format(window.campaignchainDatetimeFormat);

                    // TODO: If value is empty after validation error, populate it with data.
                    if(!startElement.val()){
                        {% if data is not null %}
                        var startDate = moment('{{ data|campaignchain_datetime() }}');
                        {% else %}
                        var startDate = minDate;
                        {% endif %}
                        // TODO: Take hour from system setting of work day end hour.
                        // TODO: Take range of new campaign (i.e. add('day', 1)) from system setting for default range.
                        var endDate = moment(startDate).hour(18).add('day',1);
                    } else {
                        var startDate = startElement.val();
                        var endDate = endElement.val();
                    }

                    startElement.daterangepicker(
                            {
                                startDate: startDate,
                                minDate: minDate,
                                endDate: endDate,
                                timePicker: true,
                                timePickerIncrement: 5,
                                format: window.campaignchainDatetimeFormat,
                                timePicker12Hour: false
                            },
                        function(start, end, label) {
                            console.log('startElement');
                            console.log(start);
                            console.log(end);
                            console.log('startDate: ' + start.format(window.campaignchainDatetimeFormat));
                            console.log('endDate:' + end.format(window.campaignchainDatetimeFormat));
                            // Set dates for daterangepicker of end date field.
                            endElement.data('daterangepicker').setStartDate(start.format(window.campaignchainDatetimeFormat));
                            endElement.data('daterangepicker').setEndDate(end.format(window.campaignchainDatetimeFormat));
                            // Set dates for form fields.
                            startElement.val(start.format(window.campaignchainDatetimeFormat));
                            endElement.val(end.format(window.campaignchainDatetimeFormat));
                        }
                    );

                    endElement.daterangepicker(
                            {
                                startDate: startDate,
                                minDate: minDate,
                                endDate: endDate,
                                timePicker: true,
                                timePickerIncrement: 5,
                                format: window.campaignchainDatetimeFormat,
                                timePicker12Hour: false
                            },
                            function(start, end, label) {
                                console.log('endElement');
                                console.log('startDate: ' + start.format(window.campaignchainDatetimeFormat));
                                console.log('endDate:' + end.format(window.campaignchainDatetimeFormat));
                                // Set dates for daterangepicker of start date form field.
                                startElement.data('daterangepicker').setStartDate(start.format(window.campaignchainDatetimeFormat));
                                startElement.data('daterangepicker').setEndDate(end.format(window.campaignchainDatetimeFormat));
                                // Set dates for both form fields.
                                startElement.val(start.format(window.campaignchainDatetimeFormat));
                                endElement.val(end.format(window.campaignchainDatetimeFormat));
                            }
                    );
                });
            </script>
            {% endif %}
    {% endspaceless %}
{% endblock daterangepicker_widget %}

{% block textarea_widget %}
    {% spaceless %}
        {% set col_size = col_size|default(bootstrap_get_col_size()) %}

        {% if attr.simple_col is defined and attr.simple_col is not empty %}
            {% set simple_col = attr.simple_col %}
        {% endif  %}
        {% if attr.col_size is defined and attr.col_size is not empty %}
            {% set col_size = attr.col_size %}
        {% endif %}

        {% if simple_col is defined %}
            <div class="col-{{ col_size }}-{{ simple_col }}">
        {% endif %}

        {% set attr = attr|merge({ 'class': (attr.class|default('') ~ ' form-control')|trim }) %}

        <textarea {{ block('widget_attributes') }}>{{ value }}</textarea>

        {% if attr.maxlength is defined %}
            <span id="{{ id }}_counter" class="help-block"></span>

            <script type="text/javascript">
                $(document).ready(function() {
                    var text_max = {{ attr.maxlength }};
                    var text_length = $('#{{ id }}').val().length;
                    var text_remaining = text_max - text_length;

                    $('#{{ id }}_counter').html(text_remaining + ' characters remaining');

                    $('#{{ id }}').keyup(function(event) {
                        text_length = $('#{{ id }}').val().length;
                        text_remaining = text_max - text_length;

                        $('#{{ id }}_counter').html(text_remaining + ' characters remaining');
                    });
                });
            </script>
        {% endif %}

        {% if simple_col is defined %}
            </div>
        {% endif %}
    {% endspaceless %}
{% endblock textarea_widget %}