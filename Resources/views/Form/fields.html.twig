{#
This file is part of the CampaignChain package.

(c) CampaignChain, Inc. <info@campaignchain.com>

For the full copyright and license information, please view the LICENSE
file that was distributed with this source code.
#}

{% extends 'CampaignChainCoreBundle:Base:base.html.twig' %}

{% block choice_widget_collapsed %}
    {% spaceless %}
        <div id="{{ id }}">
            <script>
                $('.select2').select2({ placeholder: "Select a State", maximumSelectionSize: 6 });
                $(':checkbox').on( "click", function() {
                    $(this).parent().nextAll('select').select2("enable", this.checked );
                });
            </script>
            {% set attr = attr|merge({ 'class': (attr.class|default('') ~ ' form-control')|trim }) %}

            <select class="form-control {{ id }}-select2" {{ block('widget_attributes') }}{% if multiple %} multiple="multiple"{% endif %}>
                {% if empty_value is not none %}
                    <option></option>
                {% endif %}
                {% if preferred_choices|length > 0 %}
                    {% set options = preferred_choices %}
                    {{ block('choice_widget_options') }}
                    {% if choices|length > 0 and separator is not none %}
                        <option disabled="disabled">{{ separator }}</option>
                    {% endif %}
                {% endif %}
                {% set options = choices %}
                {{ block('choice_widget_options') }}
            </select>
            <script>
                {% if attr.show_image is defined and attr.show_image == true %}
                    function format(optionnode) {
                        if (!optionnode.id) return optionnode.text; // optgroup
                        var originalOption = optionnode.element;

                        return campaignchainTplMedium(
                                $(originalOption).data('icon'),
                                $(originalOption).data('context-icon'),
                                optionnode.text
                        );
                    }
                {% endif %}
                $('.{{ id }}-select2').select2({
                    {% if empty_value is not none %}
                        placeholder: "{{ empty_value|trans({}, translation_domain) }}", allowClear: true,
                    {% endif %}
                    {% if attr.show_image is defined and attr.show_image == true %}
                        formatResult: format,
                        formatSelection: format,
                        escapeMarkup: function(m) { return m; },
                    {% endif %}
                    {% if attr.minimum_results_for_search is defined and attr.minimum_results_for_search is not empty %}
                        {% set minimum_results_for_search = attr.minimum_results_for_search %}
                    {% else %}
                        {% set minimum_results_for_search = '5' %}
                    {% endif %}
                    minimumResultsForSearch : {{ minimum_results_for_search }}
                });
                $(':checkbox').on( "click", function() {
                    $(this).parent().nextAll('select').select2("enable", this.checked );
                });
            </script>
        </div>
    {% endspaceless %}
{% endblock choice_widget_collapsed %}

{% block choice_widget_options %}
    {% spaceless %}
        {% for group_label, choice in options %}
            {% if choice is iterable %}
                <optgroup label="{{ group_label|trans({}, translation_domain) }}">
                    {% set options = choice %}
                    {{ block('choice_widget_options') }}
                </optgroup>
            {% else %}
                <option value="{{ choice.value }}"{% if choice is selectedchoice(value) or
                    (attr.selected is defined and attr.selected == choice.value) %} selected="selected"{% endif %}
                    {% if attr.show_image is defined and attr.show_image == true %}
                        data-icon="{{ asset( choice.data|campaignchain_medium_icon ) }}"
                        data-context-icon="{{ asset( choice.data|campaignchain_medium_context ) }}"
                    {% endif %}> {{ choice.label|trans({}, translation_domain) }}
                </option>
            {% endif %}
        {% endfor %}
    {% endspaceless %}
{% endblock choice_widget_options %}

{% block daterangepicker_widget %}
    {% spaceless %}
        {% set value = data|campaignchain_datetime() %}
        {% if widget == 'single_text' %}
            {{ block('form_widget_simple') }}
        {% else %}
            {% set attr = attr|merge({ 'class': 'bootstrap-datetime' }) %}
            <div {{ block('widget_container_attributes') }}>
                {{ form_widget(form.date) }}
                {{ form_widget(form.time) }}
                {{ form_errors(form.date) }}
                {{ form_errors(form.time) }}
            </div>
        {% endif %}
        {% if attr.is_end_date is not defined or attr.is_end_date != true %}
            <script type="text/javascript">
                $(document).ready(function() {
                    // Define the start and end date elements.
                    var startElement = $('#{{ id }}');
                    var endElementId = startElement.attr('id').replace('startDate', 'endDate');
                    var endElement = $('#' + endElementId);

                    // TODO: Take hour from system setting of work day start hour.
                    var minDate = moment().hour(9).minute(0).format(window.campaignchainDatetimeFormat);

                    // TODO: If value is empty after validation error, populate it with data.
                    if(!startElement.val()){
                        {% if data is not null %}
                        var startDate = moment('{{ data|campaignchain_datetime() }}');
                        {% else %}
                        var startDate = minDate;
                        {% endif %}
                        // TODO: Take hour from system setting of work day end hour.
                        // TODO: Take range of new campaign (i.e. add('day', 1)) from system setting for default range.
                        var endDate = moment(startDate).hour(18).add('day',1);
                    } else {
                        var startDate = startElement.val();
                        var endDate = endElement.val();
                    }

                    startElement.daterangepicker(
                            {
                                startDate: startDate,
                                minDate: minDate,
                                endDate: endDate,
                                timePicker: true,
                                timePickerIncrement: 5,
                                format: window.campaignchainDatetimeFormat,
                                timePicker12Hour: false
                            },
                        function(start, end, label) {
                            console.log('startElement');
                            console.log(start);
                            console.log(end);
                            console.log('startDate: ' + start.format(window.campaignchainDatetimeFormat));
                            console.log('endDate:' + end.format(window.campaignchainDatetimeFormat));
                            // Set dates for daterangepicker of end date field.
                            endElement.data('daterangepicker').setStartDate(start.format(window.campaignchainDatetimeFormat));
                            endElement.data('daterangepicker').setEndDate(end.format(window.campaignchainDatetimeFormat));
                            // Set dates for form fields.
                            startElement.val(start.format(window.campaignchainDatetimeFormat));
                            endElement.val(end.format(window.campaignchainDatetimeFormat));
                        }
                    );

                    endElement.daterangepicker(
                            {
                                startDate: startDate,
                                minDate: minDate,
                                endDate: endDate,
                                timePicker: true,
                                timePickerIncrement: 5,
                                format: window.campaignchainDatetimeFormat,
                                timePicker12Hour: false
                            },
                            function(start, end, label) {
                                console.log('endElement');
                                console.log('startDate: ' + start.format(window.campaignchainDatetimeFormat));
                                console.log('endDate:' + end.format(window.campaignchainDatetimeFormat));
                                // Set dates for daterangepicker of start date form field.
                                startElement.data('daterangepicker').setStartDate(start.format(window.campaignchainDatetimeFormat));
                                startElement.data('daterangepicker').setEndDate(end.format(window.campaignchainDatetimeFormat));
                                // Set dates for both form fields.
                                startElement.val(start.format(window.campaignchainDatetimeFormat));
                                endElement.val(end.format(window.campaignchainDatetimeFormat));
                            }
                    );
                });
            </script>
            {% endif %}
    {% endspaceless %}
{% endblock daterangepicker_widget %}

{% block textarea_widget %}
    {% spaceless %}
        {% set col_size = col_size|default(bootstrap_get_col_size()) %}

        {% if attr.simple_col is defined and attr.simple_col is not empty %}
            {% set simple_col = attr.simple_col %}
        {% endif  %}
        {% if attr.col_size is defined and attr.col_size is not empty %}
            {% set col_size = attr.col_size %}
        {% endif %}

        {% if simple_col is defined %}
            <div class="col-{{ col_size }}-{{ simple_col }}">
        {% endif %}

        {% set attr = attr|merge({ 'class': (attr.class|default('') ~ ' form-control')|trim }) %}

        <textarea {{ block('widget_attributes') }}>{{ value }}</textarea>

        {% if attr.maxlength is defined %}
            <span id="{{ id }}_counter" class="help-block"></span>

            <script type="text/javascript">
                $(document).ready(function() {
                    var text_max = {{ attr.maxlength }};
                    var text_length = $('#{{ id }}').val().length;
                    var text_remaining = text_max - text_length;

                    $('#{{ id }}_counter').html(text_remaining + ' characters remaining');

                    $('#{{ id }}').keyup(function(event) {
                        text_length = $('#{{ id }}').val().length;
                        text_remaining = text_max - text_length;

                        $('#{{ id }}_counter').html(text_remaining + ' characters remaining');
                    });
                });
            </script>
        {% endif %}

        {% if simple_col is defined %}
            </div>
        {% endif %}
    {% endspaceless %}
{% endblock textarea_widget %}

{% block bootstrap_collection_widget %}
    {% spaceless %}
        {% if prototype is defined %}
            {% set prototype_vars = {} %}
            {% if style is defined %}
                {% set prototype_vars = prototype_vars|merge({'style': style}) %}
            {% endif %}
            {% set prototype_html = '<div class="col-xs-' ~ form.vars.sub_widget_col ~ '">' ~ form_widget(prototype, prototype_vars) ~ '</div>' %}
            {% if form.vars.allow_delete %}
                {% set prototype_html = prototype_html ~ '<div class="col-xs-' ~ form.vars.button_col ~ '"><a href="#" class="btn btn-danger btn-sm" data-removefield="collection" data-field="__id__">' ~ form.vars.delete_button_text|trans({}, translation_domain)|parse_icons|raw ~ '</a></div>' %}
            {% endif %}
            {% set prototype_html = '<div class="row">' ~ prototype_html ~ '</div>' %}

            {% set attr = attr|merge({'data-prototype': prototype_html }) %}
            {% set attr = attr|merge({'data-prototype-name': prototype_name }) %}
        {% endif %}
        <div {{ block('widget_container_attributes') }}>
            <ul class="bc-collection list-unstyled">
                {% for field in form %}
                    <li>
                        <div class="row">
                            <div class="col-xs-{{ form.vars.sub_widget_col }}">
                                {{ form_widget(field) }}
                                {{ form_errors(field) }}
                            </div>
                            {% if form.vars.allow_delete %}
                                <div class="col-xs-{{ form.vars.button_col }}">
                                    <a href="#" class="btn btn-danger btn-sm" data-removefield="collection" data-field="{{ field.vars.id }}">{{ form.vars.delete_button_text|trans({}, translation_domain)|parse_icons|raw }}</a>
                                </div>
                            {% endif %}
                        </div>
                    </li>
                {% endfor %}
            </ul>
            {% if form.vars.allow_add %}
                <a href="#" class="btn btn-primary btn-sm" data-addfield="collection" data-collection="{{ form.vars.id }}" data-prototype-name="{{ prototype_name }}">{{ form.vars.add_button_text|trans({}, translation_domain)|parse_icons|raw }}</a>
            {% endif %}
        </div>
        {# Make sure that first field is being displayed in collection and it has no delete button. #}
        <script type="application/javascript">
            if(!$("input[data-field='{{ form.vars.id }}_0']").length) {
                $("a[data-collection='{{ form.vars.id }}']").trigger('click');
            }
            $("a[data-field='{{ form.vars.id }}_0']").hide();
        </script>
    {% endspaceless %}
{% endblock bootstrap_collection_widget %}

{% block avatar_upload_widget %}
    {% set modalId = "avatar_modal_"~id %}
    {% set containerId = "avatar_upload_"~id %}
    {% set modalContent %}
        {% include 'CampaignChainCoreBundle:Form:avatarUploadModal.html.twig' with {modalId: modalId} %}
    {% endset %}

    <div class="avatar-upload-container" id="{{ containerId }}">
        {% if data is not empty %}
            <img class="avatar-image image-selected" src="{{ data|campaignchain_user_avatar|imagine_filter('avatar') }}" alt="">
        {% else %}
            <span class="avatar-image no-avatar"></span>
        {% endif %}
        <span class="hover-text">Set Image</span>
        <input type="hidden" {{ block('widget_attributes') }} value="{{ value }}">
        <script type="application/javascript">
            $(document).ready(function() {
                var settings = {{ {
                    modalContent: modalContent,
                    containerId: containerId,
                    widgetId: id,
                    modalId: modalId,
                    gravatarDownloaderUrl: path("campaignchain_core_profile_grab_gavatar"),
                    gravatarPreviewUrl: path("campaignchain_core_profile_preview_gravatar"),
                    avatarCropUrl: path("campaignchain_core_profile_crop_avatar"),
                }|json_encode|raw }};

                var $modal = $("#campaignchain-default-modal");
                var $container = $("#" + settings.containerId);
                var $widget = $("#" + settings.widgetId);
                var getEmailField = function() {
                    return $widget.parents('form').find('input[name$="[email]"]');
                };
                var getEmail = function() {
                    // Find email input by finding an input with name ending with '[email]' and
                    // getting its value.
                    return getEmailField().val();
                };
                var getGravatarUrl = function() {
                    return settings.gravatarPreviewUrl + "?email=" + encodeURIComponent(getEmail());
                };
                var updateImage = function(value, previewUrl) {
                    var cssClasses = 'avatar-image';

                    if (value) {
                        cssClasses += ' image-selected';
                        $('#'+settings.widgetId).val(value);
                    }

                    $container.find('.avatar-image').replaceWith($("<img class='"+cssClasses+"' alt='' />").attr({src: previewUrl}));
                };
                var showContent = function(selector) {
                    $modal.find('.row').hide().filter(selector).show();
                };

                $container.on("click", function() {
                    // Modal is already initialized, just show it
                    if ($modal.data('modal-initialized')) {
                        $modal
                            .find(".modal-content")
                                .html(settings.modalContent)
                            .end()
                            .modal('show');
                        return;
                    }

                    // Set up event handlers for modal
                    $modal
                        .find(".modal-content")
                            .html(settings.modalContent)
                        .end()
                        .on("show.modal.bs", function() {
                            // ignore event if it doesn't contain our modal content
                            if ($modal.find('#'+settings.modalId).length < 1) {
                                return;
                            }

                            $modal
                                .find('.gravatar-preview')
                                .attr('src', getGravatarUrl());

                            showContent('.row-avatar-upload');
                            var $fileInput = $modal.find("input[type=file]");
                            if (!$fileInput.data('fileupload-initialized')) {
                                $fileInput
                                    .fileupload({
                                        dataType: 'json',
                                        start: function() {
                                            showContent('.row-loading');
                                        },
                                        acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
                                        done: function(e, data) {
                                            var response = data.response();
                                            var result = response.result;

                                            // Default to make it a bit smaller so it's easier to resize and move around
                                            var autoCropArea = 0.9;

                                            if (result.width && result.height) {
                                                var aspectRatio = result.width / result.height;
                                                // The image is square so it is already cropped. Default to not cropping
                                                // in this case
                                                if (aspectRatio >= 0.99 && aspectRatio <= 1.01) {
                                                    autoCropArea = 1;
                                                }
                                            }

                                            $modal.find('.avatar-cropper').html(
                                                $("<img>").attr("src", result.url)
                                            );
                                            $modal.find('.avatar-cropper > img').cropper({
                                                aspectRatio: 1,
                                                autoCropArea: autoCropArea,
                                                guides: false,
                                                highlight: false
                                            });
                                            showContent('.row-avatar-crop');
                                        }
                                    })
                                    .data('fileupload-initialized', true);
                            }
                        })
                        .on("click", "#"+settings.modalId+" .btn-download-gravatar", function(e) {
                            e.preventDefault();
                            showContent('.row-loading');
                            $
                                .ajax({
                                    url: settings.gravatarDownloaderUrl,
                                    method: 'POST',
                                    dataType: 'json',
                                    data: {email: getEmail()}
                                })
                                .success(function(data, status, xhr) {
                                    updateImage(data.path, data.url);
                                    $modal.modal("hide");
                                });
                        })
                        .on("click", "#"+settings.modalId+" .btn-rotate", function(e) {
                            e.preventDefault();

                            var $button = $(this);
                            var $cropperImage = $modal.find('.avatar-cropper > img');
                            var rotation = $button.hasClass('.btn-rotate-left') ? -90 : 90;

                            $cropperImage.cropper("rotate", rotation);
                        })
                        .on("click", "#"+settings.modalId+" .btn-crop-cancel", function(e) {
                            e.preventDefault();
                            showContent('.row-avatar-upload');
                        })
                        .on("click", "#"+settings.modalId+" .btn-crop-confirm", function(e) {
                            e.preventDefault();
                            showContent('.row-loading');

                            var $cropperImage = $modal.find('.avatar-cropper > img')
                            $
                                .ajax({
                                    url: settings.avatarCropUrl,
                                    method: 'POST',
                                    dataType: 'json',
                                    data: $cropperImage.cropper('getData')
                                })
                                .success(function(data, status, xhr) {
                                    updateImage(data.path, data.url);
                                    $modal.modal('hide');
                                });
                        })
                        .modal("show")
                        .data('modal-initialized', true);
                });

                var updateGravatarIfNotSet = function() {
                    // Preview gravatar from email address if avatar hasn't been set yet
                    if (getEmail() === '' || $container.find('.avatar-image').is('.image-selected')) {
                        return;
                    }
                    updateImage(null, getGravatarUrl());
                };
                updateGravatarIfNotSet();
                getEmailField().on("blur", updateGravatarIfNotSet);

                var dragenterDepth = 0;
                $(document)
                    .on("dragenter dragleave", ".modal-content", function(e) {
                        // dragenter and dragleave are also triggered for child elements. We track depth
                        // here so we can detect when the drag left the element
                        dragenterDepth += (e.type === "dragenter") ? 1 : -1;
                        $modal.find(".upload-button-container").toggleClass("drag-drop", dragenterDepth > 0);
                    })
                    .on("drop", function() {
                        // Remove highlighting when a drop happened
                        $modal.find(".upload-button-container").removeClass("drag-drop");
                    });
            });
        </script>
    </div>
{% endblock %}