/*
 This file is part of the CampaignChain package.

 (c) CampaignChain, Inc. <info@campaignchain.com>

 For the full copyright and license information, please view the LICENSE
 file that was distributed with this source code.
 */

/*
 Tracks calls to action.

 Usage:

 Include the tracking.js file by adding the below tracking code right before the
 closing body element (i.e. </body> element).

 Replace [CAMPAIGNCHAIN INSTALLATION] with the URL of the root of your CampaignChain
 installation, e.g. http://www.example.com/tracking.js.

 Next, replace [CAMPAIGNCHAIN CHANNEL TRACKING ID] with the ID generated by CampaignChain for your
 channel.

 <script type="text/javascript">
 var campaignchainChannel = "[CAMPAIGNCHAIN CHANNEL TRACKING ID]";
 </script>
 <script type="text/javascript" src="[CAMPAIGNCHAIN INSTALLATION]/tracking.js"></script>
 */
(function(){

    function loadScript(url)
    {
        var script = document.createElement("script");
        script.src = url;
        script.type = "text/javascript";

        document.head.appendChild(script);
    }

    /*
     Includes JQuery if not yet available.
     */
    if(typeof jQuery === "undefined"){
        loadScript("//ajax.aspnetcdn.com/ajax/jQuery/jquery-1.11.1.min.js");
    }

    /*
     Include JQuery Cookies library.
     */
    loadScript("//cdnjs.cloudflare.com/ajax/libs/js-cookie/2.1.2/js.cookie.min.js");

    /**
     *  Define the CampaignChain Tracking class. We gave it an obfuscated name,
     *  so that it's not immediately apparent that CampaignChain is being used
     *  in a white-labeled scenario.
     *
     * @constructor
     */
    function {{ tracking_js_class|raw }}(){
        /**
         * The name of the CTA Tracking ID, e.g. 'campaignchain-id'.
         *
         * @type {string}
         */
        {{ tracking_id_name|raw }}

        /**
         * Value of the Tracking ID.
         *
         * @type {string|bool}
         */
        this.idValue = null;

        /**
         * The Channel Tracking ID.
         *
         * @type {string}
         */
        this.channel = null;

        /**
         * The URL of the source (i.e. the current) page.
         *
         * @type {string}
         */
        this.source = window.location.href;

        /**
         * Development or production mode.
         *
         * Possible values:
         * - "prod": Production mode
         * - "dev": Development mode
         * - "dev-stay": Click will not be executed and you will stay on the Web page.
         *
         * @type {string} prod|dev|dev-stay
         */
        this.mode = "{{ tracking_js_mode|raw }}";

        /**
         * The path to the REST API taking information from the tracking JS.
         *
         * @type {string}
         */
        this.reportApiUri = "/api/v1/report/cta/new";

        /**
         * If this script is in dev or dev-stay mode, then a base URL will be
         * passed to it, which points at the right server to call the tracking
         * API. The rationale is that different development instances (e.g.
         * one per Git branch) might point to the same Website while testing the
         * tracking code.
         *
         * @type {null}
         */
        this.reportBaseUrlName = "{{ tracking_report_base_url_name }}";

        this.ctaEvent = null;

        if(this.mode == "dev" || this.mode == "dev-stay"){
            console.log("this.idName = " + this.idName);
        }
    }

    {{ tracking_js_class|raw }}.prototype.postDispatch = function(targetSelector, success)
    {
        switch(targetSelector){
            case 'a[href]':
                if(this.mode == "dev" || this.mode == "dev-stay"){
                    console.log("Triggering stalled click event");
                }
                if(this.mode != "dev-stay"){
                    if(this.ctaEvent) {
                        this.ctaEvent.trigger('click');
                    } else {
                        window.location.href = this.target;
                    }
                }
                break;
            case 'form > input[submit]':
                if(this.mode == "dev" || this.mode == "dev-stay"){
                    console.log("Post form data to: " + this.target);
                }
                if(this.mode != "dev-stay") {
                    this.ctaEvent.unbind('submit');
                    this.ctaEvent.submit();
                }
                break;
        }
    };

    /**
     * Sends a CTA report to CampaignChain.
     *
     * @param target
     */
    {{ tracking_js_class|raw }}.prototype.sendUrlReport = function(target, alias, targetSelector)
    {
        this.target = target;

        // Check if the CampaignChain Tracking ID exists.
        if(this.getTrackingId()){
            if(this.mode == "dev" || this.mode == "dev-stay"){
                console.log("Tracking ID is in URL.");
            }

            var ajaxBaseUrl = "{{ app.request.getSchemeAndHttpHost()|raw }}";

            // Use Symfony dev environment if dev mode for API URL.
            if(this.mode == "dev" || this.mode == "dev-stay"){
                if(this.source.toLowerCase().indexOf(this.reportBaseUrlName) >= 0){
                    ajaxBaseUrl = decodeURIComponent((new RegExp("[?|&]" + this.reportBaseUrlName + "=" + "([^&;]+?)(&|#|;|$)").exec(this.source)||[,""])[1].replace(/\+/g, "%20"))||null;
                    console.log("Base URL of tracking REST API for development is: " + ajaxBaseUrl);
                }
                var ajaxUrlMode = "/app_dev.php";
            } else {
                var ajaxUrlMode = "";
            }
            // Compose the API URL.
            var ajaxUrl = ajaxBaseUrl + ajaxUrlMode + this.reportApiUri + "/" + this.channel;

            if(this.mode == "dev" || this.mode == "dev-stay"){
                console.log("API URL: " + ajaxUrl);
            }

            // Pass the tracking data to the CampaignChain API.
            jQuery.ajax({
                url: ajaxUrl,
                data: { id_name: this.idName, id_value: this.idValue, source: this.source, target: this.target, alias: alias },
                dataType: "jsonp",
                cache: false,
                context: this,
                timeout: 5000,
                success: function(data, status) {
                    if (data.success) {
                        /*
                         If an external target URL, then append the Tracking ID if it is not
                         already appended.
                         */
                        this.continueTracking(data.target_affiliation);
                    }

                    if(this.mode == "dev" || this.mode == "dev-stay"){
                        console.log("AJAX success: " + status);
                    }

                    this.postDispatch(targetSelector, true);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    if(this.mode == "dev" || this.mode == "dev-stay"){
                        console.log(
                            "AJAX error: URL: " + ajaxUrl + ", status: " + xhr.status +
                                ", message: " +thrownError
                        );
                    } else {
                        this.postDispatch(targetSelector, false);
                    }
                }
            });
        } else {
            if(this.mode == "dev" || this.mode == "dev-stay"){
                console.log("No Tracking ID exists.");
            }
            this.postDispatch(targetSelector, false);
        }
    };

    /**
     * Checks whether Tracking ID exists as parameter in URL of this page.
     *
     * @returns {boolean}
     */
    {{ tracking_js_class|raw }}.prototype.getTrackingId = function()
    {
        var logMsg = "CTA Tracking ID with name '" + this.idName + "'";

        // If not in URL, check if it's in a Cookie.
        if(this.source.toLowerCase().indexOf(this.idName) < 0){
            logMsg =  logMsg + "is NOT in URL";

            this.idValue = this.getCookie();

            if(this.idValue){
                logMsg = logMsg + ", but is in Cookie.";
            } else {
                logMsg = logMsg + " and is NOT in Cookie.";
            }
        } else {
            this.idValue = decodeURIComponent((new RegExp("[?|&]" + this.idName + "=" + "([^&;]+?)(&|#|;|$)").exec(this.source)||[,""])[1].replace(/\+/g, "%20"))||null;
            logMsg = logMsg + " is in URL.";
        }

        if(this.mode == "dev" || this.mode == "dev-stay"){
            console.log(logMsg);
            console.log("Tracking ID value: " + this.idValue);
        }

        return this.idValue;
    };

    /**
     * Appends the Tracking ID to the target URL.
     *
     * @returns {{ "{" }}{{ tracking_js_class|raw }}.target{{ "}" }}
     */
    {{ tracking_js_class|raw }}.prototype.continueTracking = function(affiliation)
    {
        // If Tracking ID is already in URL, then return as is.
        if(this.target.toLowerCase().indexOf(this.idName) >= 0){
            return true;
        }

        /*
         No Tracking ID yet, so proceed depending on the target's affiliation:

         1. "current": If target is within the current channel, then store the Tracking ID
         in a cookie.

         2. "connected": If target is outside the current channel, but within another
         Channel registered with CampaignChain, then append the Tracking ID to the URL.

         3. "unknown": If target is outside the current channel and not within a Channel
         connected with CampaignChain, then keep the target URL as is.
         */
        switch (affiliation){
            case "current":
                Cookies.set(this.idName, this.idValue);

                if(this.mode == "dev" || this.mode == "dev-stay"){
                    console.log('Stored in cookie: Tracking ID with affiliation "' + affiliation + '", name "' + this.idName + '" and value "' + this.idValue + '".' );
                }

                break;
            case "connected":
                if (this.target.indexOf(this.idName + "=") >= 0)
                {
                    var prefix = this.target.substring(0, this.target.indexOf(this.idName));
                    var suffix = this.target.substring(this.target.indexOf(this.idName));
                    suffix = suffix.substring(suffix.indexOf("=") + 1);
                    suffix = (suffix.indexOf("&") >= 0) ? suffix.substring(suffix.indexOf("&")) : "";
                    this.target = prefix + this.idName + "=" + this.idValue + suffix;
                }
                else
                {
                    if (this.target.indexOf("?") < 0)
                        this.target += "?" + this.idName + "=" + this.idValue;
                    else
                        this.target += "&" + this.idName + "=" + this.idValue;
                }

                if(this.mode == "dev" || this.mode == "dev-stay"){
                    console.log('Appended to URL: Tracking ID with affiliation "' + affiliation + '", name "' + this.idName + '" and value "' + this.idValue + '".' );
                }

                break;
            case "unknown":
                if(this.mode == "dev" || this.mode == "dev-stay"){
                    console.log('Untouched target URL "' + this.target + '" due to affiliation "' + affiliation + '".' );
                }

                break;
        }
    };

    /**
     * Returns the Tracking ID value from the Cookie.
     *
     * @returns {string}
     */
    {{ tracking_js_class|raw }}.prototype.getCookie = function() {
        return Cookies.get(this.idName);
    };

    /**
     * Is this a new visit to this page from the Activity with the CTA?
     *
     * @returns {boolean}
     */
    {{ tracking_js_class|raw }}.prototype.newVisit = function()
    {
        // Is the Tracking ID in the URL?
        if(this.source.toLowerCase().indexOf(this.idName) >= 0){
            // Is the visitor from a page outside of this pages domain?
            if(document.referrer.indexOf(location.protocol + "//" + location.host) !== 0){
                // Delete existing cookie.
                Cookies.remove(this.idName);
                if(this.mode == "dev" || this.mode == "dev-stay"){
                    console.log("New visit.");
                    console.log("Cookie deleted.");
                }
                return true;
            }
        }

        if(this.mode == "dev" || this.mode == "dev-stay"){
            console.log("Not a new visit.");
            console.log("Referrer: " + document.referrer);
        }

        return false;
    };

    /*
     If the URL of the tracking REST API has been set dynamically
     for development/testing purposes, then remove it from the target
     URL.
     */
    {{ tracking_js_class|raw }}.prototype.removeReportDevBaseUrl = function(url)
    {
        if(this.mode == "dev" || this.mode == "dev-stay") {
            if (url.toLowerCase().indexOf(this.reportBaseUrlName) >= 0) {
                console.log("Removing " + this.reportBaseUrlName + " parameter from " + url);

                if (url.indexOf("#") != -1) {
                    var hash = url.split('#')[1];
                }

                var key = this.reportBaseUrlName;

                var regex = new RegExp("\\?" + key + "=[^&]*&?", "gi");
                url = url.replace(regex, '?');
                regex = new RegExp("\\&" + key + "=[^&]*&?", "gi");
                url = url.replace(regex, '&');
                url = url.replace(/(\?|&)$/, '');
                regex = null;

                if (hash) {
                    url = url + "#" + hash;
                }
            }
        }

        return url;
    };

    window["{{ tracking_js_init|raw }}"] = window["{{ tracking_js_init|raw }}"] || function(channelId) {
        if (window.jQuery && window.Cookies){
            var tracker = new {{ tracking_js_class|raw }}();

            if(!tracker.getTrackingId()){
                if(tracker.mode == "dev" || tracker.mode == "dev-stay"){
                    console.log("No tracking ID, exiting.");
                }

                return false;
            }

            // Assign the channel ID.
            tracker.channel = channelId;

            if(tracker.mode == "dev" || tracker.mode == "dev-stay"){
                console.log("this.channel = " + tracker.channel);
            }

            /*
            If Tracking ID is not in cookie, then this is a first-time visit and
            we want to report that.
             */
            if(tracker.newVisit() === true){
                target = tracker.removeReportDevBaseUrl(window.location.href);

                /*
                 We pass this page as the target. The tracking API will then
                 detect that the source equals the target and will understand
                 that the CTA is the actual source.
                 */
                if(tracker.mode == "dev" || tracker.mode == "dev-stay"){
                    console.log("Reporting new visit with target " + target);
                }
                tracker.sendUrlReport(target, null, "a[href]");
            }

            // Disable clicks if dev-stay mode.
            if(tracker.mode == "dev-stay"){
                jQuery("a").on("click", function(event) {
                    event.preventDefault();
                });
            }

            /*
            Below sections capture calls to action on a Location (e.g. a Website
            page). A Location can provide custom Location Identifiers that match
            Locations as defined in CampaignChain.

            The name of the Location Identifier variable is always
            ``data-location-alias``.

            For example:

            A form would include a hidden field with the name
            ``data-location-alias`` and the value ``lead-capture``. Once the
            submit button was clicked, the tracking script will send tracking
            information to CampaignChain, including the Location Identifier
            value.

            CampaignChain would process the received data and map the value
            ``lead-capture`` to the Location Module named
            ``campaignchain-location-salesforce``. The mapping is defined in the
            ``campaignchain.yml`` configuration file of said module.

            Why is the ``data-identifier-value`` not identical with the module's
            name? Reason being that some users of CampaignChain might want to
            use it as a white-labeled or custom branded solution and want to
            avoid that ``campaignchain`` is being displayed anywhere in the
            source code displayed in a browser.

            Hence, we refer to ``data-identifier-value`` as the tracking alias
            of a Location module.

            A tracking alias must be unique within a Channel and two Locations
            within the same Channel cannot have the same alias.
             */

            // Has a link been clicked?
            var aClickDone = false;
            jQuery("a").on('click', function(e){
                if(aClickDone === true){
                    aClickDone = false;
                    return;
                }

                e.preventDefault();

                if(tracker.mode == "dev" || tracker.mode == "dev-stay") {
                    console.log('a[href]: Link was clicked.');
                }

                if(jQuery(this).is("data-location-alias")){
                    var alias = jQuery(this).attr("data-location-alias");
                } else {
                    var alias = "a";
                }

                tracker.ctaEvent = jQuery(this);

                tracker.sendUrlReport(jQuery(this).attr("href"), alias, "a[href]");

                aClickDone = true;
            });

            // Has a form been submitted?
            jQuery("form").submit(function (e) {
                e.preventDefault();

                if(tracker.mode == "dev" || tracker.mode == "dev-stay") {
                    console.log('form > input[submit]: Submit button was clicked.');
                }

                var formAction = "";
                if(jQuery(this).attr("action")) {
                    formAction = jQuery(this).attr("action");
                }
                if(formAction === ""){
                    formAction = window.location.href;
                }

                jQuery(this).attr('action', formAction);

                if(tracker.mode == "dev" || tracker.mode == "dev-stay") {
                    console.log("Form action: " + jQuery(this).attr('action'));
                }

                if(jQuery(this).find("input:hidden").is("data-location-alias")){
                    var alias = jQuery(this).find("input:hidden").attr("data-location-alias");
                } else {
                    var alias = "form";
                }

                tracker.ctaEvent = jQuery(this);

                tracker.sendUrlReport(jQuery(this).attr('action'), alias, "form > input[submit]");

                return false;
            });
        } else {
            setTimeout(function () {
                window["{{ tracking_js_init|raw }}"](channelId);
            }, 50);
        }
    };

    {{ tracking_init_compatibility|raw }}

})();