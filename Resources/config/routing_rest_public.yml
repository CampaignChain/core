# Copyright 2016 CampaignChain, Inc. <info@campaignchain.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# Root
#

campaignchain_core_rest_root:
    type:     rest
    prefix:   /
    resource: CampaignChain\CoreBundle\Controller\REST\RootController

campaignchain_core_rest_package:
    type:     rest
    prefix:   /packages
    resource: CampaignChain\CoreBundle\Controller\REST\PackageController

# This route accepts a Composer package name, which requires that we surpase
# Symfony's default exlusion of / in route parameters.
campaignchain_core_rest_package_get_packages_package:
    path: /packages/{package}
    defaults: { _controller: CampaignChainCoreBundle:REST/Package:getPackages }
    methods: [GET]
    requirements:
        package: ".+"

campaignchain_core_rest_module:
    type:     rest
    prefix:   /modules
    resource: CampaignChain\CoreBundle\Controller\REST\ModuleController

# This route accepts a Module URI, which requires that we surpase Symfony's
# default exlusion of / in route parameters.
campaignchain_core_rest_module_get_modules_uris_uri:
    path: /modules/uris/{uri}
    defaults: { _controller: CampaignChainCoreBundle:REST/Module:getUris }
    methods: [GET]
    requirements:
        uri: ".+"

# This route accepts a Composer package name, which requires that we surpase
# Symfony's default exlusion of / in route parameters.
campaignchain_core_rest_module_get_modules_packages_package:
    path: /modules/packages/{package}
    defaults: { _controller: CampaignChainCoreBundle:REST/Module:getPackages }
    methods: [GET]
    requirements:
        package: ".+"

campaignchain_core_rest_channel:
    type:     rest
    prefix:   /channels
    resource: CampaignChain\CoreBundle\Controller\REST\ChannelController

campaignchain_core_rest_location:
    type:     rest
    prefix:   /locations
    resource: CampaignChain\CoreBundle\Controller\REST\LocationController

# This route accept a URL, which requires that we surpase Symfony's default
# exlusion of / in route parameters.
campaignchain_core_rest_channel_get_channels_locations_urls_url:
    path: /channels/locations/urls/{url}
    defaults: { _controller: CampaignChainCoreBundle:REST/Channel:getLocationsUrls }
    methods: [GET]
    requirements:
        url: ".+"

campaignchain_core_rest_activity:
    type:     rest
    prefix:   /activities
    resource: CampaignChain\CoreBundle\Controller\REST\ActivityController

# This route accepts a Composer package name, which requires that we surpase
# Symfony's default exlusion of / in route parameters.
campaignchain_core_rest_activity_get_activities_activity:
    path: /activities/{id}
    defaults: { _controller: CampaignChainCoreBundle:REST/Activity:getActivities }
    methods: [GET]

campaignchain_core_rest_user:
    type:     rest
    prefix:   /users
    resource: CampaignChain\CoreBundle\Controller\REST\ActivityController

# This route accepts a Composer package name, which requires that we surpase
# Symfony's default exlusion of / in route parameters.
campaignchain_core_rest_user_get_users_user:
    path: /users/{id}
    defaults: { _controller: CampaignChainCoreBundle:REST/User:getUsers }
    methods: [GET]

#
# Tracking
#

campaignchain_core_tracking_new_api:
    pattern:  /report/cta/new/{channel}
    defaults: { _controller: CampaignChainCoreBundle:Tracking:newApi }